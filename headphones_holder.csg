multmatrix([[1, 0, 0, -48], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]) {
	group() {
		union() {
			group() {
				difference() {
					linear_extrude(height = 20, center = false, convexity = 1, scale = [1, 1], $fn = 256, $fa = 12, $fs = 2) {
						offset(r = -2.25, $fn = 256, $fa = 12, $fs = 2) {
							offset(r = 4.5, $fn = 256, $fa = 12, $fs = 2) {
								polygon(points = [[53.25, 2.25], [70.75, 2.25], [70.75, 46.75], [2.75, 46.75], [2.75, 76.25], [26.75, 76.25], [26.75, 76.75], [2.25, 76.75], [2.25, 46.25], [70.25, 46.25], [70.25, 2.75], [53.25, 2.75]], paths = undef, convexity = 1);
							}
						}
					}
					multmatrix([[1, 0, 0, 63.5], [0, 1, 0, 5], [0, 0, 1, -0.5], [0, 0, 0, 1]]) {
						cube(size = [4.5, 4.5, 21], center = false);
					}
				}
			}
			group() {
				multmatrix([[1, 0, 0, 68], [0, 1, 0, 5], [0, 0, 1, 10], [0, 0, 0, 1]]) {
					multmatrix([[0, -1, 2.22045e-16, 0], [2.22045e-16, 2.22045e-16, 1, 0], [-1, 0, 2.22045e-16, 0], [0, 0, 0, 1]]) {
						group() {
							difference() {
								group() {
									linear_extrude(height = 6, center = false, convexity = 2, scale = [1, 1], $fn = 256, $fa = 12, $fs = 2) {
										group() {
											group();
											polygon(points = [[-2.5, 0], [-5.5, 6], [5.5, 6], [2.5, 0]], paths = [[0, 1, 2, 3, 0]], convexity = 1);
										}
									}
								}
								multmatrix([[1, 0, 0, 0.001], [0, 1, 0, 6.001], [0, 0, 1, -0.05], [0, 0, 0, 1]]) {
									group() {
										multmatrix([[1, 0, 0, 0], [0, 1, 0, -1], [0, 0, 1, 0], [0, 0, 0, 1]]) {
											union() {
												multmatrix([[1, 0, 0, -2.5], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]) {
													cube(size = [5, 1, 6.1], center = false);
												}
												difference() {
													cylinder($fn = 256, $fa = 12, $fs = 0.25, h = 6.1, r1 = 2.5, r2 = 2.5, center = false);
													multmatrix([[1, 0, 0, -2.55], [0, 1, 0, 0.05], [0, 0, 1, -0.05], [0, 0, 0, 1]]) {
														cube(size = [5.1, 5.1, 6.2], center = false);
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
group() {
	multmatrix([[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]) {
		difference() {
			group() {
				multmatrix([[0.724138, 0.689655, 0, 0], [-0.689655, 0.724138, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]) {
					rotate_extrude(angle = 87.2056, convexity = 2, $fn = 256, $fa = 12, $fs = 2) {
						multmatrix([[1, 0, 0, 62.5], [0, 1, 0, 2.25], [0, 0, 1, 0], [0, 0, 0, 1]]) {
							group() {
								offset(r = -2.25, $fn = 256, $fa = 12, $fs = 2) {
									offset(r = 4.5, $fn = 256, $fa = 12, $fs = 2) {
										union() {
											square(size = [3, 28], center = false);
											square(size = [4, 4], center = false);
											multmatrix([[1, 0, 0, 0], [0, 1, 0, 24], [0, 0, 1, 0], [0, 0, 0, 1]]) {
												square(size = [4, 4], center = false);
											}
										}
									}
								}
							}
						}
					}
				}
			}
			multmatrix([[1, 0, 0, 58.5], [0, 1, 0, 0], [0, 0, 1, 32.9], [0, 0, 0, 1]]) {
				multmatrix([[2.22045e-16, 2.22045e-16, 1, 0], [-1, 0, 2.22045e-16, 0], [0, -1, 2.22045e-16, 0], [0, 0, 0, 1]]) {
#					group() {
						union() {
							multmatrix([[1, 0, 0, -10.25], [0, 1, 0, 0], [0, 0, 1, 0.5], [0, 0, 0, 1]]) {
								cube(size = [20.5, 18.75, 4], center = false);
							}
							multmatrix([[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 3.75], [0, 0, 0, 1]]) {
								group() {
									union() {
										multmatrix([[1, 0, 0, 0], [0, 1, 0, -0.001], [0, 0, 1, -0.05], [0, 0, 0, 1]]) {
											group() {
												linear_extrude(height = 9.1, center = false, convexity = 2, scale = [1, 1], $fn = 256, $fa = 12, $fs = 2) {
													group() {
														group();
														polygon(points = [[-2.625, 0], [-5.625, 6], [5.625, 6], [2.625, 0]], paths = [[0, 1, 2, 3, 0]], convexity = 1);
													}
												}
											}
										}
										multmatrix([[1, 0, 0, -5.625], [0, 1, 0, 5.998], [0, 0, 1, -0.5], [0, 0, 0, 1]]) {
											cube(size = [11.25, 0.125, 10], center = false);
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

